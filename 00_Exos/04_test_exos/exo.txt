Devoirs :

class Rectangle:
    def __init__(self, largeur, hauteur):
        self.largeur = largeur
        self.hauteur = hauteur

    def surface(self):
        return self.largeur * self.hauteur

- Tester le bon fonctionnement de la méthode surface avec Classicist TDD


import requests

def get_user_data(user_id):
    response = requests.get(f"
https://api.example.com/user/%7Buser_id%7D
")
    if response.status_code == 200:
        return response.json()
    return None

- Utiliser mock pour simuler l'API requests.get et tester la fonction get_user_data(). Simuler des réponses avec des statuts HTTP 200 et 404.



PART 2 :

class Produit:
    def __init__(self, nom, prix):
        self.nom = nom
        if prix < 0:
            raise ValueError("Le prix ne peut pas être négatif")
        self.prix = prix

    def get_prix(self):
        return self.prix

    def appliquer_remise(self, pourcentage):
        if pourcentage < 0 or pourcentage > 100:
            raise ValueError("Le pourcentage de remise doit être compris entre 0 et 100")
        self.prix = self.prix * (1 - pourcentage / 100)


        """
            Écrire un test unitaire pour la classe Produit qui vérifie que :

            La remise est correctement appliquée.
            Une exception est levée pour un prix ou un pourcentage négatif.
        """

class Inventaire:
    def __init__(self):
        self.produits = {}

    def ajouter_produit(self, nom, quantite):
        if nom in self.produits:
            self.produits[nom] += quantite
        else:
            self.produits[nom] = quantite

    def retirer_produit(self, nom, quantite):
        if nom not in self.produits or self.produits[nom] < quantite:
            raise ValueError("Quantité insuffisante ou produit non existant")
        self.produits[nom] -= quantite

    def obtenir_quantite(self, nom):
        return self.produits.get(nom, 0)


        """Écrire un test unitaire pour vérifier :

    L'ajout correct de produits dans l'inventaire.
    Le retrait de quantités.
    La gestion des erreurs en cas de quantité insuffisante ou de produit inexistant.
        """


class Utilisateur:
    def __init__(self, nom, mot_de_passe):
        self.nom = nom
        self.mot_de_passe = mot_de_passe

    def changer_mot_de_passe(self, ancien_mdp, nouveau_mdp):
        if ancien_mdp != self.mot_de_passe:
            raise ValueError("Ancien mot de passe incorrect")
        if len(nouveau_mdp) < 6:
            raise ValueError("Le nouveau mot de passe doit comporter au moins 6 caractères")
        self.mot_de_passe = nouveau_mdp



        """Écrire un test unitaire pour :

    Vérifier que le changement de mot de passe fonctionne.
    Vérifier qu'une exception est levée pour un ancien mot de passe incorrect ou un nouveau mot de passe trop court.
        """